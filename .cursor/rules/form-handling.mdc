---
description: Guidelines for form handling and validation in the application
globs: src/**/*.tsx, src/**/*.ts
alwaysApply: false
---

# Form Handling Guidelines

The application uses react-hook-form with zod for form management and validation. This guide outlines best practices for implementing forms.

## Form Setup

### 1. Basic Form Structure

Set up forms using react-hook-form and zod validation:

```tsx
import { zodResolver } from '@hookform/resolvers/zod'
import { useForm } from 'react-hook-form'
import * as z from 'zod'
import { Button } from '@/components/ui/button'
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form'
import { Input } from '@/components/ui/input'

// Define the form schema with zod
const formSchema = z.object({
  username: z.string().min(2, {
    message: 'Username must be at least 2 characters.',
  }),
  email: z.string().email({
    message: 'Please enter a valid email address.',
  }),
})

// Use TypeScript to infer the form values type from the schema
type FormValues = z.infer<typeof formSchema>

export function ProfileForm() {
  // Initialize form with react-hook-form
  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      username: '',
      email: '',
    },
  })

  // Form submission handler
  function onSubmit(values: FormValues) {
    console.log(values)
    // Processing logic here
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
        <FormField
          control={form.control}
          name="username"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Username</FormLabel>
              <FormControl>
                <Input placeholder="Your username" {...field} />
              </FormControl>
              <FormDescription>
                This is your public display name.
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="email"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Email</FormLabel>
              <FormControl>
                <Input placeholder="example@example.com" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <Button type="submit">Submit</Button>
      </form>
    </Form>
  )
}
```

## Form Validation

### 1. Zod Schema Definition

Define validation rules using zod schemas:

```tsx
// Simple schema
const loginSchema = z.object({
  email: z.string().email({ message: 'Invalid email address' }),
  password: z.string().min(8, { message: 'Password must be at least 8 characters' }),
})

// Complex schema with conditional validation
const registerSchema = z.object({
  email: z.string().email({ message: 'Invalid email address' }),
  password: z.string().min(8, { message: 'Password must be at least 8 characters' }),
  confirmPassword: z.string(),
  role: z.enum(['user', 'admin']),
  adminCode: z.string().optional(),
}).refine((data) => data.password === data.confirmPassword, {
  message: 'Passwords do not match',
  path: ['confirmPassword'],
}).refine(
  (data) => data.role !== 'admin' || (data.adminCode && data.adminCode.length > 0),
  {
    message: 'Admin code is required for admin accounts',
    path: ['adminCode'],
  }
)
```

### 2. Common Validation Patterns

Use these patterns for consistent validation:

- **Required Fields**: `z.string().min(1, { message: 'Required' })`
- **Email**: `z.string().email({ message: 'Invalid email address' })`
- **Password**: `z.string().min(8, { message: 'Password must be at least 8 characters' })`
- **Numbers**: `z.number().min(0, { message: 'Must be a positive number' })`
- **Dates**: `z.date({ message: 'Invalid date' })`

## Form State Management

### 1. Form Loading and Error States

Handle form submission states:

```tsx
const [isSubmitting, setIsSubmitting] = useState(false)
const [submitError, setSubmitError] = useState<string | null>(null)

async function onSubmit(values: FormValues) {
  setIsSubmitting(true)
  setSubmitError(null)
  
  try {
    await submitFormData(values)
    // Success handling
  } catch (error) {
    setSubmitError('Failed to submit form. Please try again.')
    console.error(error)
  } finally {
    setIsSubmitting(false)
  }
}

// In your form:
<Button type="submit" disabled={isSubmitting}>
  {isSubmitting ? 'Submitting...' : 'Submit'}
</Button>

{submitError && (
  <div className="text-destructive mt-2">{submitError}</div>
)}
```

### 2. Form Reset and Default Values

Handle form reset and initialization:

```tsx
// With initial data
const { data: userData } = useQuery({ 
  queryKey: ['user', userId],
  queryFn: () => fetchUser(userId)
})

// Reset form when data changes
useEffect(() => {
  if (userData) {
    form.reset({
      username: userData.username,
      email: userData.email,
    })
  }
}, [userData, form])

// Reset button
<Button 
  type="button" 
  variant="outline" 
  onClick={() => form.reset()}
>
  Reset
</Button>
```

## Form Component Organization

### 1. Form Composition

Break down complex forms into smaller components:

```tsx
// Parent form component
export function UserProfileForm({ userId }: { userId: string }) {
  // Form setup and submission logic
  
  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
        <PersonalInfoSection control={form.control} />
        <ContactInfoSection control={form.control} />
        <PreferencesSection control={form.control} />
        
        <Button type="submit">Save Changes</Button>
      </form>
    </Form>
  )
}

// Form section component
function PersonalInfoSection({ control }: { control: Control<FormValues> }) {
  return (
    <div className="space-y-4">
      <h3 className="text-lg font-medium">Personal Information</h3>
      
      <FormField
        control={control}
        name="firstName"
        render={({ field }) => (
          <FormItem>
            <FormLabel>First Name</FormLabel>
            <FormControl>
              <Input {...field} />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />
      
      {/* More fields */}
    </div>
  )
}
```

### 2. Form Hooks

Extract complex form logic into custom hooks:

```tsx
// Custom form hook
export function useUserForm(userId?: string) {
  const form = useForm<UserFormValues>({
    resolver: zodResolver(userFormSchema),
    defaultValues: {
      firstName: '',
      lastName: '',
      email: '',
      // Other defaults
    },
  })
  
  const { data: userData, isLoading } = useQuery({
    queryKey: ['user', userId],
    queryFn: () => fetchUser(userId),
    enabled: !!userId,
  })
  
  useEffect(() => {
    if (userData) {
      form.reset(userData)
    }
  }, [userData, form])
  
  const mutation = useMutation({
    mutationFn: updateUser,
    onSuccess: () => {
      toast({
        title: 'Profile updated',
        description: 'Your profile has been updated successfully.',
      })
    },
  })
  
  const onSubmit = form.handleSubmit((data) => {
    mutation.mutate({ id: userId, ...data })
  })
  
  return {
    form,
    isLoading,
    isSubmitting: mutation.isPending,
    onSubmit,
  }
}

// Usage
function ProfileForm({ userId }: { userId: string }) {
  const { form, isLoading, isSubmitting, onSubmit } = useUserForm(userId)
  
  if (isLoading) return <div>Loading...</div>
  
  return (
    <Form {...form}>
      <form onSubmit={onSubmit} className="space-y-8">
        {/* Form fields */}
        <Button type="submit" disabled={isSubmitting}>
          Save Changes
        </Button>
      </form>
    </Form>
  )
}
```

## Accessibility

### 1. Form Accessibility

Ensure forms are accessible:

- Use semantic HTML elements (`<form>`, `<label>`, etc.)
- Associate labels with form controls
- Provide error messages that can be read by screen readers
- Use `aria-required` and `aria-invalid` attributes
- Ensure keyboard navigation works correctly

### 2. Error Handling

Display errors in an accessible way:

- Show error messages adjacent to the invalid field
- Use color and icons to indicate errors, but don't rely on color alone
- Provide clear, actionable error messages 